Traceback (most recent call last):
  File "/home/arc/miniconda3/envs/real-valued-acs-system/lib/python3.9/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/home/arc/miniconda3/envs/real-valued-acs-system/lib/python3.9/site-packages/nbclient/client.py", line 1085, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/home/arc/miniconda3/envs/real-valued-acs-system/lib/python3.9/site-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/home/arc/miniconda3/envs/real-valued-acs-system/lib/python3.9/site-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "/home/arc/miniconda3/envs/real-valued-acs-system/lib/python3.9/asyncio/base_events.py", line 642, in run_until_complete
    return future.result()
  File "/home/arc/miniconda3/envs/real-valued-acs-system/lib/python3.9/site-packages/nbclient/client.py", line 551, in async_execute
    await self.async_execute_cell(
  File "/home/arc/miniconda3/envs/real-valued-acs-system/lib/python3.9/site-packages/nbclient/client.py", line 846, in async_execute_cell
    self._check_raise_for_error(cell, exec_reply)
  File "/home/arc/miniconda3/envs/real-valued-acs-system/lib/python3.9/site-packages/nbclient/client.py", line 748, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
class CartPoleObservationWrapper(gym.ObservationWrapper):
    # https://medium.com/@tuzzer/cart-pole-balancing-with-q-learning-b54c6068d947
    # _high = [env.observation_space.high[0], 0.5, env.observation_space.high[2], math.radians(50)]
    # _low = [env.observation_space.low[0], -0.5, env.observation_space.low[2], -math.radians(50)]
    def __init__(self, env, buckets):
        super().__init__(env)
        self._high = [env.observation_space.high[0], 0.5, env.observation_space.high[2], 3500]
        self._low = [env.observation_space.low[0], -0.5, env.observation_space.low[2], -3500]
        self._buckets = buckets

    def observation(self, obs):
        ratios = [(obs[i] + abs(self._low[i])) / (self._high[i] - self._low[i]) for i in range(len(obs))]
        new_obs = [int(round((self._buckets[i] - 1) * ratios[i])) for i in range(len(obs))]
        new_obs = [min(self._buckets[i] - 1, max(0, new_obs[i])) for i in range(len(obs))]
        return [str(o) for o in new_obs]


def cp_env_provider(buckets: Tuple[int]):
    return CartPoleObservationWrapper(gym.make('CartPole-v0'), buckets)


def cp_metrics(agent, env):
    pop = agent.population
    metrics = {}
    metrics.update(population_metrics(pop, env))
    return metrics


cp_base_params = {
    "classifier_length": 4,
    "number_of_possible_actions": 2,
    "epsilon": 0.9,
    "beta": 0.01,
    "gamma": 0.995,
    "initial_q": 0.5,
    "theta_exp": 50,
    "theta_ga": 50,
    "do_ga": True,
    "chi": 0.0,
    "mu": 0.03,
    "metrics_trial_frequency": 1,
    "user_metrics_collector_fcn": cp_metrics
}

NUM_EXPERIMENTS = 50
USE_RAY = True

explore_trials, exploit_trials = 500, 500

# Bucket configurations
buckets_v1 = (1, 1, 6, 6)
buckets_v2 = (4, 4, 4, 4)
buckets_v3 = (2, 2, 6, 6)
buckets_v4 = (1, 2, 4, 4)
buckets_v5 = (1, 1, 8, 8)

def buckets_to_str(buckets, delimiter: '_'):
    return f'{delimiter.join(map(str, buckets))}'


def run_cart_pole_biased_exploration(buckets):
    env_provider = lambda: cp_env_provider(buckets)

    eg = run_experiment(env_provider,
                        explore_trials,
                        exploit_trials,
                        **(cp_base_params | {'action_selector': EpsilonGreedy}))

    ad = run_experiment(env_provider,
                        explore_trials,
                        exploit_trials,
                        **(cp_base_params | {'action_selector': ActionDelay, 'biased_exploration_prob': 0.5}))

    ka = run_experiment(env_provider,
                        explore_trials,
                        exploit_trials,
                        **(cp_base_params | {'action_selector': KnowledgeArray, 'biased_exploration_prob': 0.5}))

    oiq = run_experiment(env_provider,
                         explore_trials,
                         exploit_trials,
                         **(cp_base_params | {'action_selector': EpsilonGreedy, 'biased_exploration_prob': 0.8}))

    return eg, ad, ka, oiq


@get_from_cache_or_run(cache_path=f'{cache_dir}/cart_pole/{buckets_to_str(buckets_v1)}.dill')
@repeat(num_times=NUM_EXPERIMENTS, use_ray=USE_RAY)
def cp_buckets_v1():
    return run_cart_pole_biased_exploration(buckets_v1)


@get_from_cache_or_run(cache_path=f'{cache_dir}/cart_pole/{buckets_to_str(buckets_v2)}.dill')
@repeat(num_times=NUM_EXPERIMENTS, use_ray=USE_RAY)
def cp_buckets_v2():
    return run_cart_pole_biased_exploration(buckets_v2)


@get_from_cache_or_run(cache_path=f'{cache_dir}/cart_pole/{buckets_to_str(buckets_v3)}.dill')
@repeat(num_times=NUM_EXPERIMENTS, use_ray=USE_RAY)
def cp_buckets_v3():
    return run_cart_pole_biased_exploration(buckets_v3)


@get_from_cache_or_run(cache_path=f'{cache_dir}/cart_pole/{buckets_to_str(buckets_v4)}.dill')
@repeat(num_times=NUM_EXPERIMENTS, use_ray=USE_RAY)
def cp_buckets_v4():
    return run_cart_pole_biased_exploration(buckets_v4)


@get_from_cache_or_run(cache_path=f'{cache_dir}/cart_pole/{buckets_to_str(buckets_v5)}.dill')
@repeat(num_times=NUM_EXPERIMENTS, use_ray=USE_RAY)
def cp_buckets_v5():
    return run_cart_pole_biased_exploration(buckets_v5)
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mTypeError[0m                                 Traceback (most recent call last)
Input [0;32mIn [2][0m, in [0;36m<module>[0;34m[0m
[1;32m     79[0m     oiq [38;5;241m=[39m run_experiment(env_provider,
[1;32m     80[0m                          explore_trials,
[1;32m     81[0m                          exploit_trials,
[1;32m     82[0m                          [38;5;241m*[39m[38;5;241m*[39m(cp_base_params [38;5;241m|[39m {[38;5;124m'[39m[38;5;124maction_selector[39m[38;5;124m'[39m: EpsilonGreedy, [38;5;124m'[39m[38;5;124mbiased_exploration_prob[39m[38;5;124m'[39m: [38;5;241m0.8[39m}))
[1;32m     84[0m     [38;5;28;01mreturn[39;00m eg, ad, ka, oiq
[0;32m---> 87[0m [38;5;129m@get_from_cache_or_run[39m(cache_path[38;5;241m=[39m[38;5;124mf[39m[38;5;124m'[39m[38;5;132;01m{[39;00mcache_dir[38;5;132;01m}[39;00m[38;5;124m/cart_pole/[39m[38;5;132;01m{[39;00mbuckets_to_str(buckets_v1)[38;5;132;01m}[39;00m[38;5;124m.dill[39m[38;5;124m'[39m)
[1;32m     88[0m [38;5;129m@repeat[39m(num_times[38;5;241m=[39mNUM_EXPERIMENTS, use_ray[38;5;241m=[39mUSE_RAY)
[1;32m     89[0m [38;5;28;01mdef[39;00m [38;5;21mcp_buckets_v1[39m():
[1;32m     90[0m     [38;5;28;01mreturn[39;00m run_cart_pole_biased_exploration(buckets_v1)
[1;32m     93[0m [38;5;129m@get_from_cache_or_run[39m(cache_path[38;5;241m=[39m[38;5;124mf[39m[38;5;124m'[39m[38;5;132;01m{[39;00mcache_dir[38;5;132;01m}[39;00m[38;5;124m/cart_pole/[39m[38;5;132;01m{[39;00mbuckets_to_str(buckets_v2)[38;5;132;01m}[39;00m[38;5;124m.dill[39m[38;5;124m'[39m)
[1;32m     94[0m [38;5;129m@repeat[39m(num_times[38;5;241m=[39mNUM_EXPERIMENTS, use_ray[38;5;241m=[39mUSE_RAY)
[1;32m     95[0m [38;5;28;01mdef[39;00m [38;5;21mcp_buckets_v2[39m():

[0;31mTypeError[0m: buckets_to_str() missing 1 required positional argument: 'delimiter'
TypeError: buckets_to_str() missing 1 required positional argument: 'delimiter'

